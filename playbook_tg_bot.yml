- name: dbMaster init
  hosts: host01
  gather_facts: false
  tasks:
    - name: install packages
      apt:
        name:
          - postgresql
          - postgresql-contrib
        state: latest

    - name: install package2
      pip:
        name: psycopg2-binary

    - name: Create archive
      file:
        path: "{{env.ARCHIVE}}"
        state: directory
        owner: "postgres"
        mode: 0750
      become: yes

    - name: Setup postgresql.conf
      blockinfile:
        path: "/etc/postgresql/{{env.PG_VERSION}}/main/postgresql.conf"
        block: |
          archive_mode = on
          archive_command = 'cp %p {{env.ARCHIVE}}%f'
          max_wal_senders = 10
          wal_level = replica
          wal_log_hints = on
          log_replication_commands = on
          logging_collector = on
          listen_addresses = '*'

    - name: Setup pg_hba.conf
      blockinfile:
        path: "/etc/postgresql/{{env.PG_VERSION}}/main/pg_hba.conf"
        block: |
            host all all {{ hosts.dbbot.host}}/32 trust
            host replication {{env.DB_REPL_USER}} {{hosts.db_repl.host}}/32 trust

    - name: create db_user
      become: true
      become_user: postgres
      postgresql_user:
        name: "{{env.USER_DB}}"
        password: "{{env.PASSWORD_DB}}"
        role_attr_flags: LOGIN

    - name: create repl_user
      become: true
      become_user: postgres
      postgresql_user:
        name: "{{env.DB_REPL_USER}}"
        password: "{{env.DB_REPL_PASSWORD}}"
        role_attr_flags: REPLICATION,LOGIN

    - name: configure psql db
      become: true
      become_user: postgres
      shell: |
        echo "SELECT 'CREATE DATABASE {{env.DATABASE_DB}}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '{{env.DATABASE_DB}}')\gexec" | psql
        psql -d {{env.DATABASE_DB}} -c "CREATE TABLE IF NOT EXISTS phones (id SERIAL PRIMARY KEY, number VARCHAR(100) NOT NULL);"
        psql -d {{env.DATABASE_DB}} -c "CREATE TABLE IF NOT EXISTS email (id SERIAL PRIMARY KEY, address VARCHAR(100) NOT NULL);"
        psql -c "GRANT ALL PRIVILEGES ON DATABASE {{env.DB_DATABASE}} TO {{env.DB_USER}};"
        psql -d {{env.DATABASE_DB}} -c "ALTER TABLE email OWNER TO {{env.USER_DB}};"
        psql -d {{env.DATABASE_DB}} -c "ALTER TABLE phones OWNER TO {{env.USER_DB}};"

    - name: restart postgresql
      service:
        name: postgresql
        state: restarted


- name: slave config and init
  hosts: host02
  gather_facts: false
  become: yes
  tasks:
    - name: install packages3
      apt:
        name:
          - postgresql
          - postgresql-contrib
        state: latest

    - name: Setup postgresql.conf
      blockinfile:
        path: "/etc/postgresql/{{env.PG_VERSION}}/main/postgresql.conf"
        block: |
          listen_addresses = '*'

    - name: rm db data
      command: rm -rf /var/lib/postgresql/{{env.PG_VERSION}}/main/

    - name: pg_basebackup
      command: pg_basebackup -R -h {{hosts.dbbot.host}} -U {{env.DB_REPL_USER}} -D /var/lib/postgresql/{{env.PG_VERSION}}/main/ -P
      environment:
        PGPASSWORD: "{{env.DB_REPL_PASSWORD}}"

    - name: restart postgresql
      service:
        name: postgresql
        state: restarted

- name: python bot
  hosts: host01
  gather_facts: false
  become: yes
  tasks:
    - name: install packages4
      apt:
        name:
          - python3
          - python3-pip
          - git
        state: latest

    - name: git clone
      git:
        repo: https://github.com/Mask1tt/PTStart-devops_bot.git
        dest: /tmp/bot
        version: ansible

    - name: pip install
      pip:
        requirements: /tmp/bot/requirements.txt"

    - name: run python bot
      shell: python3 /tmp/bot/bot.py
      environment:
        TOKEN: "{{env.TOKEN}}"
        HOST: "{{env.HOST}}"
        PORT: "{{env.PORT}}"
        USER: "{{env.USER}}"
        PASSWORD: "{{env.PASSWORD}}"
        HOST_DB: "{{hosts.dbbot.host}}"
        PORT_DB: "{{env.PORT_DB}}"
        USER_DB: "{{env.USER_DB}}"
        PASSWORD_DB: "{{env.PASSWORD_DB}}"
        DATABASE_DB: "{{env.DATABASE_DB}}"
        PG_VERSION: "{{env.POSTGRES_VERSION}}"
