- name: installation for all hosts
  hosts: all
  gather_facts: false
  tasks:
    - name: install postgresql
      package: 
        name: postgresql
        state: present
    - name: install psycopg
      package: 
        name: postgresql-contrib
        state: present
    - name: install libpq-dev
      package:
        name: libpq-dev
        state: present
    - name: install ssh
      package:
        name: ssh
        state: present

- name: dbMaster init
  hosts: host01
  gather_facts: false
  tasks:
    - name: copy
      copy:
        src: "{{ hostvars[inventory_hostname]['dir'] }}/initdb.sql"
        dest: /tmp/init.sql
        mode: '0755'
    - name: chown
      command: chown postgres:postgres /tmp/initdb.sql
    - name: namedb
      replace:
        path: /tmp/initdb.sql
        regexp: "rnamedb"
        replace: "{{ hostvars[inventory_hostname]['DATABASE_DB'] }}"
    - name: repluserdb
      replace:
        path: /tmp/initdb.sql
        regexp: "rrepluserdb"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
    - name: replpassworddb
      replace:
        path: /tmp/initdb.sql
        regexp: "rreplpassworddb"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
    - name: postgresuser
      replace:
        path: /tmp/initdb.sql
        regexp: "replacepostgresuser"
        replace: "{{ hostvars[inventory_hostname]['USER_DB'] }}"
    - name: postgrespassword
      replace:
        path: /tmp/initdb.sql
        regexp: "replacepostgrespassword"
        replace: "{{ hostvars[inventory_hostname]['PASSWORD_DB'] }}"
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted
    - name: initdb.sql
      command: psql -a -f /tmp/initdb.sql
      become: true
      become_user: postgres

- name: repl config
  hosts: host01
  gather_facts: false
  tasks:
    - name: add to conf file
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = '*'
          wal_level=replica
          hot_standby=on
          max_wal_senders=10
          max_replication_slots=10
          hot_standby_feedback=on
          log_replication_commands=on
    - name: pg_hba conf
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/pg_hba.conf"
        block: | 
          host replication all {{ hostvars[inventory_hostname]['ansible_host'] }}/24 scram-sha-256
          host all all {{ hostvars[inventory_hostname]['ansible_host'] }}/32 trust
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted
      
- name: slave config and init
  hosts: host02
  gather_facts: false
  tasks:
    - name: rm
      command: rm -rf /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/
    - name: pg_basebackup
      command: pg_basebackup -h {{ hostvars[inventory_hostname]['HOST_DB'] }} -D /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/ -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }} -vP -w
      environment: 
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
    - name: chown
      command: chown -R postgres:postgres /var/lib/postgresql/
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted

- name: python bot
  hosts: host01
  gather_facts: false
  tasks:
    - name: mkdir
      command: mkdir -p "{{ hostvars[inventory_hostname]['dir'] }}/repo"
    - name: git clone
      git:
        repo: https://github.com/Mask1tt/PTStart-devops_bot.git
        dest: "{{ hostvars[inventory_hostname]['dir'] }}/"
        version: ansible
    - name: pip install
      pip: 
        requirements: "{{ hostvars[inventory_hostname]['dir'] }}/requirements.txt"
    - name: mkdir logs
      command: mkdir -p "{{ hostvars[inventory_hostname]['dir'] }}/../logs"
    - name: run python bot
      command: python3 "{{ hostvars[inventory_hostname]['dir'] }}/bot.py"
      environment:
        TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"
        HOST: "{{ hostvars[inventory_hostname]['HOST'] }}"
        PORT: "{{ hostvars[inventory_hostname]['PORT'] }}"
        USER: "{{ hostvars[inventory_hostname]['USER'] }}"
        PASSWORD: "{{ hostvars[inventory_hostname]['PASSWORD'] }}"
        HOST_DB: "{{ hostvars[inventory_hostname]['ansible_host'] }}"
        PORT_DB: "{{ hostvars[inventory_hostname]['PORT_DB'] }}"
        USER_DB: "{{ hostvars[inventory_hostname]['USER_DB'] }}"
        PASSWORD_DB: "{{ hostvars[inventory_hostname]['PASSWORD_DB'] }}"
        DATABASE_DB: "{{ hostvars[inventory_hostname]['DATABASE_DB'] }}"
        PG_VERSION: "{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}"
